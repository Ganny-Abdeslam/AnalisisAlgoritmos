@article{doi:10.1177/0735633119845694,
author = {Burcu Berikan and Selçuk Özdemir},
title = {Investigating “Problem-Solving With Datasets” as an Implementation of Computational Thinking: A Literature Review},
journal = {Journal of Educational Computing Research},
volume = {58},
number = {2},
pages = {502–534},
year = {2020a},
doi = {10.1177/0735633119845694},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633119845694},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633119845694},
abstract = {This study aims to investigate problem-solving with dataset (PSWD) as a computational thinking learning implementation as reflected in academic publications. Specifically, the purpose is to specify the scope of PSWD, which overlaps with the data literacy, thinking with data, big data literacy, and data-based thinking concepts in the literature. Subaims of the study are to identify the conceptual structure of PSWD based on definitions in academic publications and to classify the reasons given in the literature to show the need for PSWD. For the purposes to investigate PSWD conceptually, to classify the reasons given for the need for PSWD, the obtained 54 publications were analyzed via content analysis. Moreover, this study investigates the most frequently suggested or used teaching strategies (in terms of instructional methods, instructional tools, and grade level) for PSWD in the literature. The frequencies of used words in selected publications referring instructional methods, instructional tools, and grade levels were shown in the findings of study. The importance of the study stems from its focus on a new approach to computational thinking instructional implementation.}
}

@article{doi:10.1177/07356331221081753,
author = {Laila El-Hamamsy and María Zapata-Cáceres and Estefanía Martín Barroso and Francesco Mondada and Jessica Dehler Zufferey and Barbara Bruno},
title = {The Competent Computational Thinking Test: Development and Validation of an Unplugged Computational Thinking Test for Upper Primary School},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {7},
pages = {1818–1866},
year = {2022b},
doi = {10.1177/07356331221081753},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221081753},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221081753},
abstract = {With the increasing importance of Computational Thinking (CT) at all levels of education, it is essential to have valid and reliable assessments. Currently, there is a lack of such assessments in upper primary school. That is why we present the development and validation of the competent CT test (cCTt), an unplugged CT test targeting 7–9 year-old students. In the first phase, 37 experts evaluated the validity of the cCTt through a survey and focus group. In the second phase, the test was administered to 1519 students. We employed Classical Test Theory, Item Response Theory, and Confirmatory Factor Analysis to assess the instruments’ psychometric properties. The expert evaluation indicates that the cCTt shows good face, construct, and content validity. Furthermore, the psychometric analysis of the student data demonstrates adequate reliability, difficulty, and discriminability for the target age groups. Finally, shortened variants of the test are established through Confirmatory Factor Analysis. To conclude, the proposed cCTt is a valid and reliable instrument, for use by researchers and educators alike, which expands the portfolio of validated CT assessments across compulsory education. Future assessments looking at capturing CT in a more exhaustive manner might consider combining the cCTt with other forms of assessments.}
}

@article{doi:10.1177/07356331221134423,
author = {Ndudi O. Ezeamuzie},
title = {Abstractive-Based Programming Approach to Computational Thinking: Discover, Extract, Create, and Assemble},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {3},
pages = {605–638},
year = {2023c},
doi = {10.1177/07356331221134423},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221134423},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221134423},
abstract = {Most studies suggest that students develop computational thinking (CT) through learning programming. However, when the target of CT is decoupled from programming, emerging evidence challenges the assertion of CT transferability from programming. In this study, CT was operationalized in everyday problem-solving contexts in a learning experiment (n = 59) that investigated whether learning programming enhances students’ CT skills. Specifically, this study examined the influence of a novel, systematic and micro instructional strategy that is grounded in abstraction and comprised of four independent but related processes – discover, extract, create, and assemble (DECA) towards simplification of problem-solving. Subsidiary questions explored the effects of students’ age, gender, computer proficiency, and prior programming experience on the development of CT. No significant difference was found between the CT skill and programming knowledge of the groups at the posttest. However, within-group paired t-tests showed that the experimental group that integrated DECA had significant improvement in CT but not in the control group across the pretest-posttest axis. Implications of the inconclusive finding about the transfer of programming skills to CT are emphasized and the arguments for disentangling CT from programming are highlighted.}
}

@article{doi:10.1177/0735633120965919,
author = {Danial Hooshyar and Margus Pedaste and Yeongwook Yang and Liina Malva and Gwo-Jen Hwang and Minhong Wang and Heuiseok Lim and Dejan Delev},
title = {From Gaming to Computational Thinking: An Adaptive Educational Computer Game-Based Learning Approach},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {3},
pages = {383–409},
year = {2021d},
doi = {10.1177/0735633120965919},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120965919},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120965919},
abstract = {Educational games have been increasingly used to improve students’ computational thinking. However, most existing games have focused on the theoretical knowledge of computational thinking, ignoring the development of computational thinking skills. Moreover, there is a lack of integration of adaptivity into educational computer games for computational thinking, which is crucial to addressing individual needs in developing computational thinking skills. In this study, we present an adaptive educational computer game, called AutoThinking, for developing students’ computational thinking skills in addition to their conceptual knowledge. To evaluate the effects of the game, we conducted an experimental study with 79 elementary school students in Estonia, where the experimental group learned with AutoThinking, while the control group used a traditional technology-enhanced learning approach. Our findings show that learning with the adaptive educational computer game significantly improved students’ computational thinking related to both conceptual knowledge and skills. Moreover, students using the adaptive educational computer game showed a significantly higher level of interest, satisfaction, flow state, and technology acceptance in learning computational thinking. Implications of the findings are also discussed.}
}

@article{doi:10.1177/0735633120972050,
author = {Ugur Kale and Jiangmei Yuan},
title = {Still a New Kid on the Block? Computational Thinking as Problem Solving in Code.org},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {4},
pages = {620–644},
year = {2021e},
doi = {10.1177/0735633120972050},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120972050},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120972050},
abstract = {Computational thinking is a means to understand and solve complex problems through using computer science concepts and techniques. While there is an increase in the number of initiatives focusing on coding, whether they (a) address computational thinking and problem-solving skills and (b) use methods of teaching problem solving is yet to be explored. As a preliminary step, this study focuses on examining 3rd grade lesson plans at Code.org. The analysis identified various components of computational thinking and problem solving as well as specific problem-solving teaching methods used to address these skills. Besides such cognitive outcomes, the findings also revealed affective, reflective, and social aspects of learning supported in the lessons.}
}

@article{doi:10.1177/07356331241242435,
author = {Tongxi Liu},
title = {Relationships Between Executive Functions and Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {5},
pages = {1267–1301},
year = {2024f},
doi = {10.1177/07356331241242435},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241242435},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241242435},
abstract = {Addressing cognitive disparities has become a paramount concern in computational thinking (CT) education. The intricate and nuanced relationships between CT and cognitive variations emphasize the needs to accommodate diverse cognitive profiles when fostering CT skills, recognizing that these cognitive functions can manifest as either strengths or limitations in different students. Consequently, understanding the connections between students’ cognitive functions and CT skills assumes pivotal importance in the design of personalized instructional strategies for CT. Despite a general consideration of learning variability in CT education, empirical insights exploring the correlation between cognitive skills and CT competencies remain notably scarce. This study endeavors to bridge this research gap by investigating the links between executive functions and CT skills, as well as the associations between their sub-dimensions. The results reveal a statistically significant correlation coefficient of 0.452 between these two domains, underscoring the notable connection between executive functions and CT abilities. Furthermore, the sub-dimensional analysis offers a comprehensive understanding of how specific executive functions uniquely contribute to certain CT skills. In light of these findings, this research offers a promising pathway for the development of tailored CT education programs that can cater to the unique needs of each individual, ultimately facilitating inclusive CT programs and making significant contributions to broaden STEM education and future workforce.}
}

@article{doi:10.1177/01614681221104043,
author = {Rose K. Pozos and Samuel Severance and Jill Denner and Kip Tellez},
title = {Exploring Design Principles in Computational Thinking Instruction for Multilingual Learners},
journal = {Teachers College Record},
volume = {124},
number = {5},
pages = {127–145},
year = {2022g},
doi = {10.1177/01614681221104043},
URL = {https://doi-org.crai.referencistas.com/10.1177/01614681221104043},
eprint = {https://doi-org.crai.referencistas.com/10.1177/01614681221104043},
abstract = {Background: Multilingual learners have been overlooked and understudied in computer science education research. As the CS for All movement grows, it is essential to design integrated, justice-oriented curricula that help young multilingual learners begin to develop computational thinking skills and discourses. Purpose: We present a conceptual framework and accompanying design principles for justice-centered computational thinking activities that are language-rich, with the aim of supporting learners’ agency and building their capacity over time to use computing for good in their communities. Setting: Our work takes place in a research–practice partnership centered in an elementary school in California with a significant multilingual Latinx population. Research Design: We have engaged in two cycles of design-based research with preservice and in-service teachers at an elementary school. Through analysis of one case study during the second and most recent cycle, we examined the potential of teachers using our design principles for supporting multilingual learners’ language development through engagement in computational thinking. Conclusions: Our findings suggest that multilingual learners will engage in productive discourse when computational thinking lessons are designed to (1) be meaningfully contextualized, (2) position students as agentic learners, and (3) promote coherence over time. However, more research is needed to understand how teachers use these principles over time, and what additional supports are needed to ensure coordination between stakeholders to develop and effectively implement coherent learning progressions.}
}

@article{doi:10.1177/0735633120988807,
author = {Sheng-Yi Wu and Yu-Sheng Su},
title = {Visual Programming Environments and Computational Thinking Performance of Fifth- and Sixth-Grade Students},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {6},
pages = {1075–1092},
year = {2021h},
doi = {10.1177/0735633120988807},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120988807},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120988807},
abstract = {Currently, many countries actively cultivate students to develop computational thinking ability. Many visual programming environments (VPEs) and physical robot courses have been integrated into computational thinking learning in the elementary education stage. This study explores the relationship between the programming learning environment (including VPE, physical robots, and no experience) and the computational thinking ability of higher-grade elementary school students of different genders. The results show that learning through VPE or physical robots can help students improve their computational thinking ability and that students learn better via physical robots. In addition, among the four dimensions of computational thinking ability, most students are weak in algorithm design. In terms of gender, no differences exist in computational thinking ability. Further analysis reveals that female students have better decomposition performance in VPE learning, while male students have better algorithm design performance.}
}

@article{doi:10.1177/21582440241249897,
author = {Ting-Ting Wu and Andik Asmara and Yueh-Min Huang and Intan Permata Hapsari},
title = {Identification of Problem-Solving Techniques in Computational Thinking Studies: Systematic Literature Review},
journal = {Sage Open},
volume = {14},
number = {2},
pages = {21582440241249896},
year = {2024i},
doi = {10.1177/21582440241249897},
URL = {https://doi-org.crai.referencistas.com/10.1177/21582440241249897},
eprint = {https://doi-org.crai.referencistas.com/10.1177/21582440241249897},
abstract = {Problem-solving skills are an ability that must be cultivated to equip students with the skills needed to deal with today’s increasingly complex and volatile environment. Computational thinking represents a new paradigm in problem-solving skills. After Wing proposed Computational Thinking as problem-solving skills in 2006, other scholars investigated this topic; nevertheless, the link between Computational Thinking and problem-solving has not been clearly discussed in previous studies. To uncover evidence for the connection between Computational Thinking and problem-solving skills, we conduct a systematic literature review of 37 papers collected from Web of Science database. The results indicate that (a) problem-solving is discussed in the 37 articles in the context of Computational Thinking, (b) the most frequently employed Computational Thinking stages in problem-solving skills are decomposition, pattern recognition, abstraction, and algorithm, (c) Computational Thinking is closely linked to problem-solving, and (d) Computational Thinking and problem-solving stages serve the same functions in solving problems. The results of this study will encourage the development of education research, particularly in the application of CT as a problem-solving tool in various real-life scenarios.}
}

@article{doi:10.1177/07356331231160294,
author = {Ying Zhou and Ching Sing Chai and Xiuting Li and Chao Ma and Baoping Li and Ding Yu and Jyh-Chong Liang},
title = {Application of Metacognitive Planning Scaffolding for the Cultivation of Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {6},
pages = {1123–1142},
year = {2023j},
doi = {10.1177/07356331231160294},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231160294},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231160294},
abstract = {Computational thinking is a way of thinking that helps people “think like a computer scientist” to solve practical problems. However, practicing computational thinking through programming is dependent on the problem solvers’ metacognition. This study investigated students’ metacognitive planning and problem-solving performance in programming through two quantitative studies. First, we analyzed the performance of metacognitive planning and of problem solving through the programming of 21 freshmen, and found that the metacognitive planning performance related to “problem description” and “program comprehension” was significantly correlated with problem-solving performance. Second, semi-scaffolding and full-scaffolding were designed based on the first study. Another 89 freshmen were randomly divided into three groups and were asked to write their programming plan with no-scaffolding, semi-scaffolding, or with full-scaffolding. ANCOVA revealed that the problem-solving performance of the no-scaffolding group was significantly weaker than that of the other two groups, but there was no significant difference between the semi-scaffolding and the full-scaffolding groups. The study indicated that semi-scaffolding had a similar effect to full-scaffolding on problem-solving performance. The study suggests that teachers should emphasize supporting students’ “problem description” and “program comprehension” using semi-scaffolding. This scaffolding technique is sufficient and efficient for training students’ computational thinking through problem solving in programming.}
}

